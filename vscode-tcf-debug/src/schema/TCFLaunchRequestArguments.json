{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
        "__restart": {
            "description": "Arbitrary data from the previous, restarted session.\nThe data is sent as the `restart` attribute of the `terminated` event.\nThe client should leave the data intact."
        },
        "breakpointPrefix": {
            "type": "string"
        },
        "debugTCFMessages": {
            "description": "Show TCF messages in the debug console",
            "type": "boolean"
        },
        "host": {
            "default": "localhost",
            "description": "(Remote) TCF agent host",
            "type": "string"
        },
        "internal": {
            "properties": {
                "commandToken": {
                    "default": "default",
                    "description": "Normally TCF command tokens are very terse identifiers which make manually reading the TCF messages hard.\nIf this property is set to `debug` a more verbose command token is used which makes the reply easier to\nunderstand.",
                    "enum": [
                        "debug",
                        "default"
                    ],
                    "type": "string"
                },
                "debugTCFMessages": {
                    "description": "Show TCF messages in the debug console",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "noDebug": {
            "description": "If true, the launch request should launch the program without enabling debugging.",
            "type": "boolean"
        },
        "pathMapper": {
            "default": "return function (path, context) { return path; }",
            "description": "A Javascript function to map a local path to the debugger path",
            "type": "string"
        },
        "playback": {
            "description": "File path with recorded TCF message which will be used to replay TCF messages (host and port will be ignored)",
            "type": "string"
        },
        "playbackFlag": {
            "properties": {
                "consumeEventsRepliesEagerly": {
                    "description": "The mock socket is not strict about ordering. Most replies are delayed until\na command actually comes in. This is designed to accomodate timing variations in how\nthe user / code may invoke commands.\n\nIf this flag is `true` it consumes events and replies eagerly. This may break\nmost scenarios but may also be preferable in other situations (eg. specific tests).",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "port": {
            "default": 1534,
            "description": "TCF connection port",
            "type": "number"
        },
        "record": {
            "description": "File path where TCF messages will be recorded into",
            "type": "string"
        },
        "stackTraceDepth": {
            "description": "Maximum number of stack frames that a stackTrace can have. Unlimited, if not defined.",
            "type": "number"
        },
        "timeout": {
            "default": 10000,
            "description": "Debug commands timeout (milliseconds)",
            "type": "number"
        }
    },
    "type": "object"
}

